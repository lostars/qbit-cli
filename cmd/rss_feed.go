package cmd

import (
	"errors"
	"fmt"
	"github.com/spf13/cobra"
	"qbit-cli/internal/api"
	"strconv"
)

func RssFeed() *cobra.Command {
	cmd := &cobra.Command{
		Use:     "feed [flags]",
		Short:   "Add subscription",
		Example: "feed url1 url2 url3 --rule=test --path=movie",
		Args: func(cmd *cobra.Command, args []string) error {
			if len(args) < 1 {
				return errors.New("you must provide a rss url at least")
			}
			return nil
		},
	}

	var (
		rule, path string
	)

	cmd.Flags().StringVar(&rule, "rule", "", "attached rule name")
	cmd.Flags().StringVar(&path, "path", "", "feed name. name will auto generated by url index")

	cmd.RunE = func(cmd *cobra.Command, args []string) error {

		var successUrl []string
		for idx, arg := range args {
			index := ""
			if idx != 0 {
				index = "-" + strconv.FormatInt(int64(idx+1), 10)
			}
			if err := api.RssAddFeed(arg, path+index); err != nil {
				fmt.Printf("rss feed fail url: %s, %v\n", arg, err)
			} else {
				successUrl = append(successUrl, arg)
			}
		}

		if rule != "" && len(successUrl) > 0 {
			var rssRule *api.RssRule
			ruleMap := api.RssRuleList()
			if ruleMap != nil {
				if r := ruleMap[rule]; r != nil {
					for _, arg := range successUrl {
						r.AffectedFeeds = append(r.AffectedFeeds, arg)
					}
					rssRule = r
					if err := api.RssSetRule(rule, rssRule); err != nil {
						fmt.Printf("rss feed set rule failed: %v\n", err)
					}
				} else {
					fmt.Printf("add feed failed by: [%s] not found\n", rule)
				}
			}
		}

		return nil
	}

	return cmd
}
